import json
from typing import Optional

from pydantic import BaseModel, Field, conlist


class PaymentInfoModel(BaseModel):
    """
    PaymentInfoModel (as generated by openapi-generator v7.0.1)
    """
    allowed_payment_methods: Optional[conlist(str)] = Field(None, alias="allowedPaymentMethods")
    __properties = ["allowedPaymentMethods"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> "PaymentInfoModel":
        """Create an instance of PaymentLibraryResponsesAllowedPaymentMethodsResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> "PaymentInfoModel":
        """Create an instance of PaymentInfoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentInfoModel.parse_obj(obj)

        _obj = PaymentInfoModel.parse_obj({
            "allowed_payment_methods": obj.get("allowedPaymentMethods")
        })
        return _obj
